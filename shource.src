#!/usr/bin/env shource
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 ft=sh:

set -e # Exit on any error. Use `COMMAND || true` to nullify
set -E # Functions inherit error trap
set -u # Error on unset variables. Use ${var:-alternate value} to bypass
set -f # Error on failed file globs (e.g. *.txt )
set -o pipefail # Failed commands in pipes cause the whole pipe to fail

LOG_LEVEL=0

readonly tag="# source code generated using shource: https://github.com/oliverisaac/shource"
readonly self_dir="$( dirname "$( readlink -f "$0" )" )"
readonly self="$self_dir/$( basename "$( readlink -f "$0" )" )"

readonly git_dir=~/.shource
readonly my_path=$( dirname "$( readlink -f "$0" )" )
readonly SHOURCE_PATH="${SHOURCE_PATH:-$my_path}"
export SHOURCE_PATH

# This function receives a shource "path" and turns it into a file that can be read
function shource_to_filepath()
{
    local regex='^ *shource +((.*):)?([a-zA-Z0-9_]+)\(\) *$'
    local github_regex='^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$'

    if ! [[ $1 =~ $regex ]]; then
        return 1
    fi

    local src_dir="${BASH_REMATCH[2]}"
    local src_file="${BASH_REMATCH[3]}"
    local type='git'
    local git_url=""
    local ret_code=0

    if [[ $src_dir == "" ]]; then
        type='local'
    elif [[ $src_dir =~ $github_regex ]]; then
        git_url="https://github.com/$src_dir"
    else
        git_url="$src_dir"
    fi

    if [[ $type == "local" ]]; then
        src_dir="$SHOURCE_PATH"
    fi

    if [[ $type == "git" ]]; then
        local right_hand=$( echo "$git_url" | awk -F':' '{print $NF}' )
        local repo_owner=$( echo "$right_hand" | awk -F'/' '{print $(NF-1)}' )
        local repo_name=$( echo "$right_hand" | awk -F'/' '{print $(NF)}' )

        local src_dir="$git_dir/$repo_owner/$repo_name"
        if [[ -d "$src_dir" ]]; then
            ( cd "$src_dir" && git pull || git clone "$git_url" . || true ) &>/dev/null
            ret_code=0
        else
            mkdir -p "$src_dir"
            ( cd "$src_dir" && git clone "$git_url" ) &>/dev/null
            ret_code=$?
        fi
    fi

    local filepath="$src_dir/shources/$src_file"
    echo "$filepath"

    if ! [[ -e $filepath ]]; then
        return 1
    fi

    return $ret_code
}

function main()
{
    local source="$1"
    local create="$2"
    local overwrite="$3"
    local print_tag="$4"
    local run="$5"
    local print_shebang="$6"
    local make_exec="$7"
    local indent="$8"
    shift 8
    local args=( "${@}" )

    local run_default=false
    if [[ $run == "default" ]]; then
        run=true
        run_default=true
    fi

    local target_dir=$( dirname "$source" )
    target_dir=$( cd $target_dir && pwd -P )

    local default_write_target="/dev/stdout"
    local write_target="$default_write_target"

    local source_file="$target_dir/$( basename "$source" )"
    if $create; then
        local regex='[.]src$'
        if ! [[ $source_file =~ $regex ]]; then
            log 0 "Your filename must end with .src to trigger creation"
            exit 2
        fi

        target_file="${source_file%.src}"
        if [[ -e "$target_file" ]] && ! $overwrite; then
            local second_line=$( cat "$target_file" | head -n2 | tail -n1 )
            if [[ $second_line != "$tag" ]]; then
                log 0 "You will accidently overwrite $target_file if you continue! Use --force to allow overwrites"
                exit 4
            fi
        fi

        write_target="$target_file"
    fi

    local temp_folder=$( mktemp -d )
    local temp_write="$temp_folder/$( basename "${source_file%.src}" )"

    local line_index=0

    local print_this_line=true
    local func_path
    while IFS='' read -r line; do
        print_this_line=true
        line_index=$(( line_index + 1 ))

        local regex='^( *)shource .+\(\) *$'
        if [[ $line =~ $regex ]]; then
            local line_indent="${BASH_REMATCH[1]}"
            if func_path=$( shource_to_filepath "$line" ); then
                /usr/bin/env bash "$self" --no-print-tag --indent="$indent${line_indent}" --no-print-shebang --no-make-exec --no-run "$func_path"  >> "$temp_write"
                continue
            else
                log 0 "ERROR: You tried to shource $func_path but it does not exist!"
                log 0 "$source_file:$line_index : $line"
                exit 1
            fi
        fi

        if [[ $line_index == 1 ]] && [[ $line =~ ^#! ]]; then
            if ! $print_shebang; then
                print_this_line=false
            fi

            if [[ $line =~ \#!.*shource ]]; then
                line="#!/usr/bin/env bash"
            fi
        fi

        if $print_this_line; then
            printf "%s\n" "$line" >> "$temp_write"
        fi
    done < <( cat "$source_file" ) 

    if $print_tag; then
        echo "$tag" | sed -i"" -e '1 r /dev/stdin' "$temp_write"
    fi

    if $create || ! $run; then
        local write_to_file=false
        # If we are writing to stdout or if the file will actually make a change, then write the file
        if [[ $write_target == $default_write_target ]]; then
            write_to_file=true
        elif ! ( diff -q "$write_target" "$temp_write" 2>/dev/null ); then
            write_to_file=true
        fi

        if $write_to_file; then
            cat "$temp_write" > "$write_target"
        fi

        if $make_exec && [[ $write_target != $default_write_target ]]; then
            chmod +x "$write_target"
        fi
    fi

    # IF the user explicitly asked to run then run. If they didn't ask to create, then run
    local return_value=0
    if ( ! $run_default && $run ) || ( ! $create && $run ); then
        chmod +x "$temp_write"
        /usr/bin/env bash "$temp_write" "${args[@]}" || return_value=$?
    fi

    rm -r "$temp_folder"
    return $return_value
}


function _display_help()
{
    cat - > >( sed -r -e "s/^ {,8}//" ) <<EOF
        Sample help file
        TADA!
EOF
}

shource parse_args()
shource log()
shource traps()

all_args=( "${@}" )
shource_args=()
command_args=()

for x in "${all_args[@]}"; do
    shource_args+=( "$x" )
    shift
    if [[ -f "$x" ]]; then
        break
    fi
done
command_args=( "${@}" )

# Check if any of the args are a cry for help
if echo "${shource_args[@]}" | grep -q -wiEe "-h|--help|help"; then
    _display_help
    exit 4
fi

# Edit parse args to indicate which flags are boolean. Then pass each of those arguments to main
parse_args run make_exec print_tag print_shebang create force -- "${shource_args[@]}"
main "${_args[0]}" "${create:-false}" "${force:-false}" "${print_tag:-true}" "${run:-default}" "${print_shebang:-true}" "${make_exec:-true}" "${indent:-}" "${command_args[@]}"; exit $?
