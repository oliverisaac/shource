#!/usr/bin/env bash
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4

set -e # Exit on any error. Use `COMMAND || true` to nullify
set -E # Functions inherit error trap
set -u # Error on unset variables. Use ${var:-alternate value} to bypass
set -f # Error on failed file globs (e.g. *.txt )
set -o pipefail # Failed commands in pipes cause the whole pipe to fail

LOG_LEVEL=0

readonly tag="# source code generated using shource: https://github.com/oliverisaac/shource"

shource parse_args()
shource log()
shource traps()

function main()
{
    local source="$1"
    local create="$2"
    local overwrite="$3"
    local no_print_tag="$4"
    local run="$5"
    local no_print_shebang="$6"
    local no_make_exec="$7"

    local src_dir="$( dirname "$( readlink -f "$0" )" )"
    src_dir=$( cd "$src_dir" && pwd -P )
    local self="$src_dir/$( basename "$( readlink -f "$0" )" )"

    local target_dir=$( dirname "$source" )
    target_dir=$( cd $target_dir && pwd -P )

    local default_write_target="/dev/stdout"
    local write_target="$default_write_target"

    local source_file="$target_dir/$( basename "$source" )"
    if $create; then
        local regex='[.]src$'
        if ! [[ $source_file =~ $regex ]]; then
            log 0 "Your filename must end with .src to trigger creation"
            exit 2
        fi

        target_file="${source_file%.src}"
        if [[ -e "$target_file" ]] && ! $overwrite; then
            local second_line=$( cat "$target_file" | head -n2 | tail -n1 )
            if [[ $second_line != "$tag" ]]; then
                log 0 "You will accidently overwrite $target_file if you continue! Use --force to allow overwrites"
                exit 4
            fi
        fi

        write_target="$target_file"
    fi

    local temp_write=$(mktemp)

    local line_index=0
    local print_tag=true
    if $no_print_tag; then
        print_tag=false
    fi

    local print_this_line=true
    while IFS='' read -r line; do
        print_this_line=true
        line_index=$(( line_index + 1 ))

        local regex='^shource ([a-zA-Z_0-9]+)\(\) *$'
        if [[ $line =~ $regex ]]; then
            local func_name="${BASH_REMATCH[1]}"
            local func_path="$src_dir/shources/$func_name"
            if [[ -e "$func_path" ]]; then
                "$self" "$func_path" --no-print-tag --no-print-shebang --no-make-exec
                continue
            else
                log 0 "ERROR: You tried to shource $func_name but it does not exist in $src_dir!"
                exit 1
            fi
        fi

        if [[ $line_index == 1 ]] && [[ $line =~ ^#! ]]; then
            if $no_print_shebang; then
                print_this_line=false
            fi
        fi

        if $print_this_line; then
            printf "%s\n" "$line"
        fi
    done < <( cat "$source_file" )  > "$temp_write"

    if $print_tag; then
        echo "$tag" | sed -i"" -e '1 r /dev/stdin' "$temp_write"
    fi

    cat "$temp_write" > "$write_target"
    if ! $no_make_exec && [[ $write_target != $default_write_target ]]; then
        chmod +x "$write_target"
    fi

    if $run; then
        chmod +x "$temp_write"
        "$temp_write"
    fi

    rm "$temp_write"
    return 0
}


function _display_help()
{
    cat - > >( sed -r -e "s/^ {,8}//" ) <<EOF
        Sample help file
        TADA!
EOF
}

# Check if any of the args are a cry for help
if echo "${@}" | grep -q -wiEe "-h|--help|help"; then
    _display_help
    exit 4
fi

# Edit parse args to indicate which flags are boolean. Then pass each of those arguments to main
parse_args run no_make_exec no_print_tag no_print_shebang create force -- "${@}"
main "${_args[0]}" "${create:-false}" "${force:-false}" "${no_print_tag:-false}" "${run:-false}" "${no_print_shebang:-false}" "${no_make_exec:-false}"

exit $?


