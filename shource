#!/usr/bin/env bash
# source code generated using shource: https://github.com/oliverisaac/shource
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 ft=sh:

set -e # Exit on any error. Use `COMMAND || true` to nullify
set -E # Functions inherit error trap
set -u # Error on unset variables. Use ${var:-alternate value} to bypass
set -f # Error on failed file globs (e.g. *.txt )
set -o pipefail # Failed commands in pipes cause the whole pipe to fail

LOG_LEVEL=0

readonly tag="# source code generated using shource: https://github.com/oliverisaac/shource"
readonly self_dir="$( dirname "$( readlink -f "$0" )" )"
readonly self="$self_dir/$( basename "$( readlink -f "$0" )" )"
readonly git_dir=~/.shource

export orig_shource_dir="${orig_shource_dir:-$self_dir}"

# This function receives a shource "path" and turns it into a file that can be read
function shource_to_filepath()
{
    local line="$1"
    local shource_dir="$2"

    local regex='^ *shource +((.*):)?([a-zA-Z0-9_]+)\(\) *$'
    local github_regex='^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$'

    if ! [[ $line =~ $regex ]]; then
        return 1
    fi

    local src_dir="${BASH_REMATCH[2]}"
    local src_file="${BASH_REMATCH[3]}"
    local type='git'
    local git_url=""
    local ret_code=0
    local filepath

    if [[ $src_dir == "" ]]; then
        type='local'
    elif [[ $src_dir =~ $github_regex ]]; then
        git_url="https://github.com/$src_dir"
    else
        git_url="$src_dir"
    fi

    if [[ $type == "local" ]]; then
        src_dir="$shource_dir"
        filepath="$src_dir/shources/$src_file"
        if ! [[ -e "$filepath" ]]; then
            filepath="${orig_shource_dir}/shources/$src_file"
        fi
    fi

    if [[ $type == "git" ]]; then
        local right_hand=$( echo "$git_url" | awk -F':' '{print $NF}' )
        local repo_owner=$( echo "$right_hand" | awk -F'/' '{print $(NF-1)}' )
        local repo_name=$( echo "$right_hand" | awk -F'/' '{print $(NF)}' )

        local src_dir="$git_dir/$repo_owner/$repo_name"
        if ! [[ -d "$src_dir" ]]; then
            mkdir -p "$src_dir"
        fi

        ( cd "$src_dir" && git pull || git clone "$git_url" . || true ) &>/dev/null

        filepath="${src_dir}/shources/$src_file"
    fi

    filepath=$( sanitize_shource_folder "$filepath" )
    echo "$filepath"

    if ! [[ -e $filepath ]]; then
        return 1
    fi

    return $ret_code
}

function sanitize_shource_folder()
{
    local shource_folder="$1"
    echo "$shource_folder" | gsed -r 's/\/+/\//g' | gsed -r 's/\/+$//;' | gsed -r 's/shources$//' 
}

function main()
{
    local source="$1"
    local create="$2"
    local overwrite="$3"
    local print_tag="$4"
    local run="$5"
    local print_shebang="$6"
    local make_exec="$7"
    local indent="$8"
    local shource_folder=$( sanitize_shource_folder "$9" )
    local write_dir="${10}"
    local child="${11}"
    shift 11
    local args=( "${@}" )

    local run_default=false
    if [[ $run == "default" ]]; then
        run=true
        run_default=true
    fi

    local target_dir=$( dirname "$source" )
    target_dir=$( cd $target_dir && pwd -P )

    local default_write_target="/dev/stdout"
    local write_target="$default_write_target"

    local source_file="$target_dir/$( basename "$source" )"
    if $create; then
        local regex='[.]src$'
        if ! [[ $source_file =~ $regex ]]; then
            log 0 "Your filename must end with .src to trigger creation"
            exit 2
        fi

        target_file="${source_file%.src}"
        if [[ -e "$target_file" ]] && ! $overwrite; then
            local second_line=$( cat "$target_file" | head -n2 | tail -n1 )
            if [[ $second_line != "$tag" ]]; then
                log 0 "You will accidently overwrite $target_file if you continue! Use --force to allow overwrites"
                exit 4
            fi
        fi

        write_target="$target_file"
    fi

    local temp_write="$write_dir/$( basename "${source_file%.src}" )"
    local log_file="${write_dir}/.already_shourced"
    touch "$log_file"

    local line_index=0

    local print_this_line=true
    local func_path
    while IFS='' read -r line; do
        print_this_line=true
        line_index=$(( line_index + 1 ))

        local regex='^( *)shource .+\(\) *$'
        if [[ $line =~ $regex ]]; then
            local line_indent="${BASH_REMATCH[1]}"
            if func_path=$( shource_to_filepath "$line" "$shource_folder" ); then
                if grep -q -e "^${func_path}$" "$log_file" &>/dev/null; then
                    # Already included the file
                    continue
                fi

                echo "$func_path" >> "$log_file"
                /usr/bin/env bash "$self" --child --write-dir="$write_dir" --shource-folder="$( dirname "$func_path" )" --no-print-tag --indent="$indent${line_indent}" --no-print-shebang --no-make-exec --no-run "$func_path"  >> "$temp_write"
                continue
            else
                log 0 "ERROR: You tried to shource $func_path but it does not exist!"
                log 0 "$source_file:$line_index : $line"
                exit 1
            fi
        fi

        if [[ $line_index == 1 ]] && [[ $line =~ ^#! ]]; then
            if ! $print_shebang; then
                print_this_line=false
            fi

            if [[ $line =~ \#!.*shource ]]; then
                line="#!/usr/bin/env bash"
            fi
        fi

        if $print_this_line; then
            printf "%s\n" "$line" >> "$temp_write"
        fi
    done < <( cat "$source_file" ) 

    if $print_tag; then
        echo "$tag" | gsed -i"" -e '1 r /dev/stdin' "$temp_write"
    fi

    if $create || ! $run; then
        local write_to_file=false
        # If we are writing to stdout or if the file will actually make a change, then write the file
        if [[ $write_target == $default_write_target ]]; then
            write_to_file=true
        elif ! ( diff -q "$write_target" "$temp_write" 2>/dev/null ); then
            write_to_file=true
        fi

        if $write_to_file; then
            cat "$temp_write" > "$write_target"
        fi

        if $make_exec && [[ $write_target != $default_write_target ]]; then
            chmod +x "$write_target"
        fi
    fi

    # IF the user explicitly asked to run then run. If they didn't ask to create, then run
    local return_value=0
    if ( ! $run_default && $run ) || ( ! $create && $run ); then
        chmod +x "$temp_write"
        /usr/bin/env bash "$temp_write" "${args[@]}" || return_value=$?
    fi

    if ! $child; then
        rm -r "$write_dir"
    fi
    return $return_value
}


function _display_help()
{
    cat - > >( gsed -r -e "s/^ {,8}//" ) <<EOF
        Sample help file
        TADA!
EOF
}


# Loops through pasgsed in args and sets variables for each of them
# Call like this: _parse_args help refresh debug -- "${@}"
function parse_args()
{
    local reset_x=false

    if [[ $- =~ x ]]; then
        reset_x=true
    fi
    set +x



function json_escape()
{(
    set +x
    local str="$1"
    str="${str//\\/\\\\}" # \
    str="${str//\//\\\/}" # /
    str="${str//\"/\\\"}" # "
    str="${str//$'\t'/\\t}" # \t (tab)
    str="${str//$'\n'/\\\n}" # \n (newline)
    str="${str//^M/\\\r}" # \r (carriage return)
    str="${str//^L/\\\f}" # \f (form feed)
    str="${str//^H/\\\b}" # \b (backspace)
    printf "%s" "$str"
)}

function json_print()
{(
    set +x


    local args=( "${@}" )
    local num_args=${#args[@]}
    local i

    printf "%s" "{"
    for (( i=0; i<$num_args; i=i+2 )); do
        local format="%s"
        local key="${args[$i]}"
        local value="${args[$i+1]}"

        local type="${key##*:}"
        if [[ $type != "" ]]; then
            format="%$type"
        fi

        # IF it's a string type, then wrap in quotes
        if [[ $format =~ s$ ]]; then
            format="\"$format\""
            value=$( json_escape "$value" )
        fi

        local comma=","
        if [[ $i -eq 0 ]]; then
            comma=""
        fi

        printf -- "$comma \"%s\": $format" "${key%%:*}" "$value"
    done

    printf "%s\n" "}"
)}


function _short_stack()
{(
    set +x
    local STACK=""
    local i 
    local stack_size="${#FUNCNAME[@]}"
    local response=""
    local line_no

    # to avoid noise we start with 1 to skip the get_stack function
    for (( i=2; i<=( stack_size - 1 ); i++ )); do
        local func="${FUNCNAME[$i]}"
        [[ "$func" == "" ]] && func=MAIN
        local linen="${BASH_LINENO[$(( i - 1 ))]}"
        local src="${BASH_SOURCE[$i]}"
        [[ "$src" == "" ]] && src=non_file_source

        response="$func:${linen}${response:+.}${response:-}"

    done
    local bash_source="${BASH_SOURCE[0]}"
    bash_source="${BASH_SOURCE##*/}"
    echo "$bash_source.$response"
)}
function log()
{(
    set +x


    local level="$1"
    shift
    local args=( "${@}" )
    if [[ $level -le ${LOG_LEVEL:-0} ]]; then
        local time=$( date "+%Y-%m-%d %H:%M:%S.%3N" )
        local message="${@}"

        if [[ ${JSON_LOG_FORMAT:-false} == "false" ]]; then
            echo "$time [log $level]: $message" >&2
        else
            time=$( date -u +"%Y-%m-%dT%H:%M:%S.%3NZ" )
            # We subtract one line number because shource adds a line at the beginning
            json_print time:s "$time" level:d "$level" msg:s "$message" source:s "$( _short_stack )" >&2
        fi
    fi
)}



    function parse_these()
    {
        local boolean_flags=()
        local input_args=( "${@}" )
        local num_args=${#input_args[@]}
        local this_arg i key value

        log 2 "Called parse_args with these arguments: ${input_args[@]}"

        for (( i=0; i<num_args; i++ )); do
            this_arg="${input_args[$i]}"
            log 4 "$i : $this_arg"
            if [[ $this_arg == "--" ]]; then
                i=$(( i + 1 ))
                break
            fi
            boolean_flags+=( "$( echo "${this_arg}" | tr '_-' '.' | gsed 's/^-*//' )" )
        done

        local boolean_regex=$( IFS='|'; echo "${boolean_flags[*]}" )
        boolean_regex="^--(no-)?(${boolean_regex})(=(true|false))?$"

        local populate_args=false
        declare -g -a _args=()
        for (( ; i<num_args; i++ )); do
            this_arg="${input_args[$i]}"
            log 4 "$i : $this_arg"

            if [[ $this_arg == "--" ]]; then
                populate_args=true
                continue
            fi

            key=""
            value=true

            # Boolean flags
            if $populate_args; then
                key="_args"
                value="$this_arg"
            elif [[ ${#boolean_flags[@]} -gt 0 ]] && [[ $this_arg =~ $boolean_regex ]]; then
                key="${BASH_REMATCH[2]}"

                if [[ ${BASH_REMATCH[4]} == "false" ]]; then
                    if [[ ${BASH_REMATCH[1]} == "no-" ]]; then
                        value=true
                    else
                        value=false
                    fi
                else
                    if [[ ${BASH_REMATCH[1]} == "no-" ]]; then
                        value=false
                    else
                        value=true
                    fi
                fi
            elif [[ $this_arg =~ ^--([^=]+)=(.*)$ ]]; then
                key="${BASH_REMATCH[1]}"
                value="${BASH_REMATCH[2]}"
            elif [[ $this_arg =~ ^--(.+)$ ]]; then
                key="${BASH_REMATCH[1]}"
                ((i++))
                value="${input_args[$i]}"
            fi
            key="${key//-/_}"
            if [[ $key == "" ]]; then
                key="_args"
                value="$this_arg"
            fi
            printf "%s:%s\n" "$key" "$( printf "%s" "$value" | base64 -w0 )"
        done
    }

    local key b64value
    _args=()
    while IFS=':' read key b64value; do
        local value=$( echo "$b64value" | base64 --decode )

        if [[ $key == "_args" ]]; then
            _args+=( "${value}" )
        else
            declare -g "$key"="$value"
        fi
    done < <( parse_these "${@}" ) 

    $reset_x && set -x || true
    return 0
}

# On exit is called on every exit
function _on_exit()
{
    # Cleanup code goes here
    local exit_status="$?"
}

function _on_term()
{
    echo "Terminated!" >&2
    # A termination also tends to call an error, so we block that
    trap '' ERR
}

function _on_error()
{
    local lineno=$1
    shift
    local pipe_fails=( "${@}" )
    echo "ERROR (${pipe_fails[@]}) on line $lineno: Most recent call last:" >&2
    _print_stack >&2
    local x
    for x in ${pipe_fails[@]}; do
        if [[ $x -ne 0 ]]; then
            exit $x
        fi
    done
    exit 1
}


function _print_stack()
{(
    set +x
   local STACK=""
   local i 
   local stack_size="${#FUNCNAME[@]}"
   # to avoid noise we start with 1 to skip the get_stack function
   for (( i=( stack_size - 1 ); i>=2; i-- )); do
      local func="${FUNCNAME[$i]}"
      [ x$func = x ] && func=MAIN
      local linen="${BASH_LINENO[$(( i - 1 ))]}"
      local src="${BASH_SOURCE[$i]}"
      [ x"$src" = x ] && src=non_file_source

      echo "   at: $func $src:$linen"
   done
)}


trap '_on_term' HUP TERM INT
trap '_on_error $LINENO ${PIPESTATUS[@]}' ERR
trap '_on_exit' EXIT

all_args=( "${@}" )
shource_args=()
command_args=()

for x in "${all_args[@]}"; do
    shource_args+=( "$x" )
    shift
    if [[ -f "$x" ]]; then
        break
    fi
done
command_args=( "${@}" )

# Check if any of the args are a cry for help
if echo "${shource_args[@]}" | grep -q -wiEe "-h|--help|help"; then
    _display_help
    exit 4
fi

# Edit parse args to indicate which flags are boolean. Then pass each of those arguments to main
parse_args child run make_exec print_tag print_shebang create force -- "${shource_args[@]}"
main "${_args[0]}" "${create:-false}" "${force:-false}" "${print_tag:-true}" "${run:-default}" "${print_shebang:-true}" "${make_exec:-true}" "${indent:-}" "${shource_folder:-$self_dir}" "${write_dir:-$( mktemp -d )}" "${child:-false}" "${command_args[@]}"; exit $?
