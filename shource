#!/usr/bin/env bash
# source code generated using shource: https://github.com/oliverisaac/shource
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 ft=sh:

set -e # Exit on any error. Use `COMMAND || true` to nullify
set -E # Functions inherit error trap
set -u # Error on unset variables. Use ${var:-alternate value} to bypass
set -f # Error on failed file globs (e.g. *.txt )
set -o pipefail # Failed commands in pipes cause the whole pipe to fail

LOG_LEVEL=0

readonly tag="# source code generated using shource: https://github.com/oliverisaac/shource"
readonly self_dir="$( dirname "$( readlink -f "$0" )" )"
readonly self="$self_dir/$( basename "$( readlink -f "$0" )" )"
readonly git_dir=~/.shource

export orig_shource_dir="${orig_shource_dir:-$self_dir}"

if which gsed &>/dev/null; then
    function sed(){
        gsed "${@}"
    }

    export -f sed
fi

# This function receives a shource "path" and turns it into a file that can be read
function shource_to_filepath()
{
    local line="$1"
    local shource_dir="$2"

    local regex='^ *shource +((.*):)?([a-zA-Z0-9_]+)\(\) *$'
    local github_regex='^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$'

    if ! [[ $line =~ $regex ]]; then
        return 1
    fi

    local src_dir="${BASH_REMATCH[2]}"
    local src_file="${BASH_REMATCH[3]}"
    local type='git'
    local git_url=""
    local ret_code=0
    local filepath

    if [[ $src_dir == "" ]]; then
        type='local'
    elif [[ $src_dir =~ $github_regex ]]; then
        git_url="https://github.com/$src_dir"
    else
        git_url="$src_dir"
    fi

    if [[ $type == "local" ]]; then
        src_dir="$shource_dir"
        filepath="$src_dir/shources/$src_file"
        if ! [[ -e "$filepath" ]]; then
            filepath="${orig_shource_dir}/shources/$src_file"
        fi
    fi

    if [[ $type == "git" ]]; then
        local right_hand=$( echo "$git_url" | awk -F':' '{print $NF}' )
        local repo_owner=$( echo "$right_hand" | awk -F'/' '{print $(NF-1)}' )
        local repo_name=$( echo "$right_hand" | awk -F'/' '{print $(NF)}' )

        local src_dir="$git_dir/$repo_owner/$repo_name"
        if ! [[ -d "$src_dir" ]]; then
            mkdir -p "$src_dir"
        fi

        ( cd "$src_dir" && git pull || git clone "$git_url" . || true ) &>/dev/null

        filepath="${src_dir}/shources/$src_file"
    fi

    filepath=$( sanitize_shource_folder "$filepath" )
    echo "$filepath"

    if ! [[ -e $filepath ]]; then
        return 1
    fi

    return $ret_code
}

function sanitize_shource_folder()
{
    local shource_folder="$1"
    echo "$shource_folder" | sed -r 's/\/+/\//g' | sed -r 's/\/+$//;' | sed -r 's/shources$//' 
}

function main()
{
    local source="$1"
    local create="$2"
    local overwrite="$3"
    local print_tag="$4"
    local run="$5"
    local print_shebang="$6"
    local make_exec="$7"
    local indent="$8"
    local shource_folder=$( sanitize_shource_folder "$9" )
    local write_dir="${10}"
    local child="${11}"
    shift 11
    local args=( "${@}" )

    local run_default=false
    if [[ $run == "default" ]]; then
        run=true
        run_default=true
    fi

    local target_dir=$( dirname "$source" )
    target_dir=$( cd $target_dir && pwd -P )

    local default_write_target="/dev/stdout"
    local write_target="$default_write_target"

    local source_file="$target_dir/$( basename "$source" )"
    if $create; then
        local regex='[.]src$'
        if ! [[ $source_file =~ $regex ]]; then
            log 0 "Your filename must end with .src to trigger creation"
            exit 2
        fi

        target_file="${source_file%.src}"
        if [[ -e "$target_file" ]] && ! $overwrite; then
            local second_line=$( cat "$target_file" | sed -n -e '2 p')
            if [[ $second_line != "$tag" ]]; then
                log 0 "You will accidently overwrite $target_file if you continue! Use --force to allow overwrites"
                exit 4
            fi
        fi

        write_target="$target_file"
    fi

    local temp_write="$write_dir/$( basename "${source_file%.src}" )"
    local log_file="${write_dir}/.already_shourced"
    touch "$log_file"

    local line_index=0

    local print_this_line=true
    local func_path
    while IFS='' read -r line; do
        print_this_line=true
        line_index=$(( line_index + 1 ))

        local regex='^( *)shource .+\(\) *$'
        if [[ $line =~ $regex ]]; then
            local line_indent="${BASH_REMATCH[1]}"
            if func_path=$( shource_to_filepath "$line" "$shource_folder" ); then
                if grep -q -e "^${func_path}$" "$log_file" &>/dev/null; then
                    # Already included the file
                    continue
                fi

                echo "$func_path" >> "$log_file"
                ! [[ -e "$temp_write" ]] || [[ -w "$temp_write" ]] || chmod +w "$temp_write";
                /usr/bin/env bash "$self" --child --write-dir="$write_dir" --shource-folder="$( dirname "$func_path" )" --no-print-tag --indent="$indent${line_indent}" --no-print-shebang --no-make-exec --no-run "$func_path"  >> "$temp_write"
                continue
            else
                log 0 "ERROR: You tried to shource $func_path but it does not exist!"
                log 0 "$source_file:$line_index : $line"
                exit 1
            fi
        fi

        if [[ $line_index == 1 ]] && [[ $line =~ ^#! ]]; then
            if ! $print_shebang; then
                print_this_line=false
            fi

            if [[ $line =~ \#!.*shource ]]; then
                line="#!/usr/bin/env bash"
            fi
        fi

        if $print_this_line; then
            ! [[ -e "$temp_write" ]] || [[ -w "$temp_write" ]] || chmod +w "$temp_write";
            printf "%s\n" "$line" >> "$temp_write"
        fi
    done < <( cat "$source_file" ) 

    if $print_tag; then
        echo "$tag" | sed -i"" -e '1 r /dev/stdin' "$temp_write"
    fi

    if $create || ! $run; then
        local write_to_file=false
        # If we are writing to stdout or if the file will actually make a change, then write the file
        if [[ $write_target == $default_write_target ]]; then
            write_to_file=true
        elif ! ( diff -q "$write_target" "$temp_write" 2>/dev/null ); then
            write_to_file=true
        fi

        if $write_to_file; then
            ! [[ -e "$write_target" ]] || [[ -w "$write_target" ]] || chmod +w "$write_target";
            cat "$temp_write" > "$write_target"
        fi

        if $make_exec && [[ $write_target != $default_write_target ]]; then
            ! [[ -e "$write_target" ]] || [[ -w "$write_target" ]] || chmod +w "$write_target";
            chmod +x "$write_target"
        fi
        [[ -e $write_target ]] && chmod -w "$write_target"
    fi

    # IF the user explicitly asked to run then run. If they didn't ask to create, then run
    local return_value=0
    if ( ! $run_default && $run ) || ( ! $create && $run ); then
        chmod +x "$temp_write"
        /usr/bin/env bash "$temp_write" "${args[@]}" || return_value=$?
    fi


    if ! $child; then
        rm -r "$write_dir"
    fi
    return $return_value
}


function _display_help()
{
    cat - > >( sed -r -e "s/^ {,8}//" ) <<EOF
        Sample help file
        TADA!
EOF
}

#!/usr/bin/env bash

# Loops through passed in args and sets variables for each of them
# Call like this: _parse_args help refresh debug -- "${@}"



function json_escape()
{(
    set +x
    local str="$1"
    str="${str//\\/\\\\}" # \
    str="${str//\//\\\/}" # /
    str="${str//\"/\\\"}" # "
    str="${str//$'\t'/\\t}" # \t (tab)
    str="${str//$'\n'/\\\n}" # \n (newline)
    str="${str//^M/\\\r}" # \r (carriage return)
    str="${str//^L/\\\f}" # \f (form feed)
    str="${str//^H/\\\b}" # \b (backspace)
    printf "%s" "$str"
)}

function json_print()
{(
    set +x


    local args=( "${@}" )
    local num_args=${#args[@]}
    local i

    printf "%s" "{"
    for (( i=0; i<$num_args; i=i+2 )); do
        local format="%s"
        local key="${args[$i]}"
        local value="${args[$i+1]}"

        local type="${key##*:}"
        if [[ $type != "" ]]; then
            format="%$type"
        fi

        # IF it's a string type, then wrap in quotes
        if [[ $format =~ s$ ]]; then
            format="\"$format\""
            value=$( json_escape "$value" )
        fi

        local comma=","
        if [[ $i -eq 0 ]]; then
            comma=""
        fi

        printf -- "$comma \"%s\": $format" "${key%%:*}" "$value"
    done

    printf "%s\n" "}"
)}


function _short_stack()
{(
    set +x
    local STACK=""
    local i 
    local stack_size="${#FUNCNAME[@]}"
    local response=""
    local line_no

    # to avoid noise we start with 1 to skip the get_stack function
    for (( i=2; i<=( stack_size - 1 ); i++ )); do
        local func="${FUNCNAME[$i]}"
        [[ "$func" == "" ]] && func=MAIN
        local linen="${BASH_LINENO[$(( i - 1 ))]}"
        local src="${BASH_SOURCE[$i]}"
        [[ "$src" == "" ]] && src=non_file_source

        response="$func:${linen}${response:+.}${response:-}"

    done
    local bash_source="${BASH_SOURCE[0]}"
    bash_source="${BASH_SOURCE##*/}"
    echo "$bash_source.$response"
)}
export -f _short_stack
function log()
{(
    set +x

    if ${USING_AUTO_LOG:-false}; then
        exec 2>&9
    fi

    local level=0
    if [[ $1 =~ ^-?[0-9]+$ ]]; then
        local level="$1"
        shift
    fi
    local args=( "${@}" )
    if [[ $level -le ${LOG_LEVEL:-0} ]]; then
        local time=$( date "+%Y-%m-%d %H:%M:%S.%3N" )
        local message="${@}"

        if [[ ${JSON_LOG_FORMAT:-false} == "false" ]]; then
            echo "$time [log $level]: $message" > /dev/stderr
        else
            time=$( date -u +"%Y-%m-%dT%H:%M:%S.%3NZ" )
            # We subtract one line number because shource adds a line at the beginning
            json_print time:s "$time" level:d "$level" msg:s "$message" source:s "$( _short_stack )" > /dev/stderr
        fi
    fi
) 
}



function parse_these()
{
    local boolean_long_flags=()
    local boolean_short_flags=()
    local string_long_flags=()
    local string_short_flags=()
    local array_long_flags=()
    local array_short_flags=()
    declare -A required_flags
    declare -A flag_maps

    local input_args=( "${@}" )
    local num_args=${#input_args[@]}
    local this_arg i key value arg_type

    log 2 "Called parse_args with these arguments: ${input_args[@]}"

    for (( i=0; i<num_args; i++ )); do
        this_arg="${input_args[$i]}"
        if [[ $this_arg == "--" ]]; then
            i=$(( i + 1 ))
            break
        fi
        local arg_type=$BOOL_TYPE

        flag_regex='^([!])?([a-zA-Z0-9_-]+)(:([a-zA-Z]))?'
        default_help_regex="(@(.*))?(/(.*))"
        regex_bool="${flag_regex}:b(ool(ean)?)?$default_help_regex$"
        regex_array="${flag_regex}:a(rr(ay)?)?$default_help_regex$"
        regex_string="${flag_regex}:s(tr(ing)?)?$default_help_regex$"
        if [[ $this_arg =~ ${regex_bool} ]]; then
            arg_type=$BOOL_TYPE
        elif [[ $this_arg =~ ${regex_array} ]]; then
            arg_type=$ARRAY_TYPE
        elif [[ $this_arg =~ ${regex_string} ]]; then
            arg_type=$STRING_TYPE
        else
            log 0 "bool regex: $regex_bool"
            log 0 "array regex: $regex_array"
            log 0 "string regex: $regex_string"
            log 0 "Proper format for argument config: !long_flag:short_flag:type@default/help_message"
            log 0 "help_message is required, use ! to indicate required"
            log -1 "Error with pars args, unexpected config: $this_arg"
        fi

        # We want to be able to match both dry_run and dry-run
        required=false
        [[ "!" == "${BASH_REMATCH[1]}" ]] && required=true 
        long_flag="${BASH_REMATCH[2]}"
        long_flag="${long_flag//[_.-]/_}"
        var_name="${long_flag}"

        short_flag="${BASH_REMATCH[4]}"
        default_value="${BASH_REMATCH[8]}"
        help_text="${BASH_REMATCH[10]}"

        if $required && [[ -z $default_value ]]; then
            required_flags[$var_name]=false
        else
            required=false
        fi

        local short_flags
        local long_flags

        case "$arg_type" in
            $BOOL_TYPE)
                declare -n short_flags=boolean_short_flags
                declare -n long_flags=boolean_long_flags
                [[ -z $default_value ]] && default_value="false"
            ;;
            $ARRAY_TYPE)
                declare -n short_flags=array_short_flags
                declare -n long_flags=array_long_flags
            ;;
            $STRING_TYPE)
                declare -n short_flags=string_short_flags
                declare -n long_flags=string_long_flags
            ;;
            * )
                log -1 "Invalid flag  time: $arg_type"
            ;;
        esac

        log 4 "$i : long: $long_flag short: $short_flag type: $arg_type required: $required default: $default_value help: $help_text"

        long_flags=( "${long_flags[@]}" "${long_flag//_/[-_.]}" )
        flag_maps[$long_flag]="$var_name"
        if [[ -n $short_flag ]]; then
            short_flags=( "${short_flags[@]}" "${short_flag//_/[-_.]}" )
            flag_maps[$short_flag]="$var_name"
        fi

        local required_message="Optional"
        $required && required_message="Required"
        b64help=$( printf "   %-15s : %s (default: %s) %s" "--${long_flag}${short_flag:+, -}${short_flag}" "$help_text" "$default_value" "$required_message" )
        b64help=$( echo "$b64help" | base64 -w0 )

        b64default=$( echo "$default_value" | base64 -w0 )

        # Initialize each arg
        printf "%s:%s:%s:%s:%s\n" "$arg_type" "${var_name//./_}" "init" "$b64default" "$b64help"
    done

    # Want to match: --debug --no-debug -d --debug=false --debug=true -d=false -d=true -d false -d true --debug false --debug true 
    local boolean_long_regex=$( IFS='|'; echo "${boolean_long_flags[*]}" )
    local boolean_short_regex=$( IFS='|'; echo "${boolean_short_flags[*]}" )
    boolean_regex="^(--(no-)?(${boolean_long_regex})|-(${boolean_short_regex}))(=(true|false))?$"
    log 4 "bool regex: $boolean_regex"

    # Want to match: --name=bob --name bob -n bob -n=bob
    local string_long_regex=$( IFS='|'; echo "${string_long_flags[*]}" )
    local string_short_regex=$( IFS='|'; echo "${string_short_flags[*]}" )
    string_regex="^(--(${string_long_regex})|-(${string_short_regex}))(=(.*))?$"
    log 4 "string regex: $string_regex"

    # Want to match: --name=bob --name bob -n bob -n=bob
    local array_long_regex=$( IFS='|'; echo "${array_long_flags[*]}" )
    local array_short_regex=$( IFS='|'; echo "${array_short_flags[*]}" )
    array_regex="^(--(${array_long_regex})|-(${array_short_regex}))(=(.*))?$"
    log 4 "array regex: $array_regex"

    log 5 "Flag maps:"
    for k in "${!flag_maps[@]}"; do
        log 5 "$k : ${flag_maps[$k]}"
    done

    local populate_args=false
    declare -g -a _args=()
    for (( ; i<num_args; i++ )); do
        this_arg="${input_args[$i]}"
        log 4 "$i : $this_arg"

        if [[ $this_arg == "--" ]]; then
            populate_args=true
            continue
        fi

        key=""
        value=true
        kind=$STRING_TYPE
        
        # Boolean flags
        if $populate_args; then
            key="_args"
            value="$this_arg"
            kind=$ARRAY_TYPE
        elif [[ ${#boolean_long_flags[@]} -gt 0 ]] && [[ $this_arg =~ $boolean_regex ]]; then
            kind=$BOOL_TYPE

            negation_part="${BASH_REMATCH[2]}"
            long_key="${BASH_REMATCH[3]}"
            short_key="${BASH_REMATCH[4]}"
            equals_part="${BASH_REMATCH[5]}"
            equals_value="${BASH_REMATCH[6]}"
            value=true

            search_key="${long_key:-${short_key}}"
            search_key="${search_key//[_.-]/_}"
            key="${flag_maps[$search_key]:-}"
            [[ -z $key ]] && log -1 "Could not find $search_key as a defined argument"

            if [[ $equals_part == "" ]]; then
                # If the next arguemnt is true or false, we'll assume it is referrign to this bool
                peek_value="${input_args[$i+1]:-}"
                if [[ $peek_value == "true" ]] || [[ $peek_value == "false" ]]; then
                    ((i++))
                    value=$peek_value
                fi
            else
                if [[ $equals_value == "true" ]] || [[ $equals_value == "false" ]]; then
                    value=$equals_value
                else
                    log 0 "Error: a bool flag can only be set to true or false (Got: '$equals_value')"
                    return 1
                fi
            fi

            # Test the negation part of this
            if [[ $negation_part == "no-" ]]; then
                # Matches --no-bool false
                if $value; then
                    value=false
                else
                    value=true
                fi
            fi
        elif [[ ${#string_long_flags[@]} -gt 0 ]] && [[ $this_arg =~ $string_regex ]]; then
            kind="$STRING_TYPE"

            long_key="${BASH_REMATCH[2]}"
            short_key="${BASH_REMATCH[3]}"
            equals_part="${BASH_REMATCH[4]}"
            equals_value="${BASH_REMATCH[5]}"
            value=""

            search_key="${long_key:-${short_key}}"
            search_key="${search_key//[_.-]/_}"
            key="${flag_maps[$search_key]:-}"
            [[ -z $key ]] && log -1 "Could not find $search_key as a defined argument"

            if [[ $equals_value == "" ]]; then
                if [[ $(( i + 1 )) -gt ${#input_args[@]} ]]; then
                    log -1 "You must provide a value for --$key"
                fi
                ((i++))
                value="${input_args[$i]}"
            else
                value="$equals_value"
            fi
        elif [[ ${#array_long_flags[@]} -gt 0 ]] && [[ $this_arg =~ $array_regex ]]; then
            kind="$ARRAY_TYPE"

            long_key="${BASH_REMATCH[2]}"
            short_key="${BASH_REMATCH[3]}"
            equals_part="${BASH_REMATCH[4]}"
            equals_value="${BASH_REMATCH[5]}"
            value=""

            search_key="${long_key:-${short_key}}"
            search_key="${search_key//[_.-]/_}"
            key="${flag_maps[$search_key]:-}"
            [[ -z $key ]] && log -1 "Could not find $search_key as a defined argument"

            if [[ $equals_value == "" ]]; then
                if [[ $(( i + 1 )) -gt ${#input_args[@]} ]]; then
                    log -1 "You must provide a value for --$key"
                fi
                ((i++))
                value="${input_args[$i]}"
            else
                value="$equals_value"
            fi
        else
            key="_args"
            value="$this_arg"
            kind=$ARRAY_TYPE
        fi

        key="${key//-/_}"
        if [[ $key == "" ]]; then
            key="_args"
            value="$this_arg"
            kind=$ARRAY_TYPE
        fi

        required_flags[$key]=true
        printf "%s:%s:%s:\n" "$kind" "$key" "$( base64 -w0 <<< "$value" )"
    done

    local missing_flags=()
    for f in "${!required_flags[@]}"; do
        if ! "${required_flags[$f]}"; then
            missing_flags+=( "$f" )
        fi
    done
    if [[ ${#missing_flags[@]} -gt 0 ]]; then
        log -1 "Missing these required flags: ${missing_flags[@]}"
        exit 1
    fi
}
export -f parse_these

function parse_args()
{
    local reset_x=false
    local ARRAY_TYPE=array BOOL_TYPE=boolean STRING_TYPE=string
    local help_texts=()

    if [[ $- =~ x ]]; then
        reset_x=true
    fi
    set +x
    local to_parse
    to_parse=$( parse_these help:h:bool/"Display this help" "${@}" ) 

    local key b64value
    while IFS=':' read kind key b64value b64default b64help; do
        local value
        local init=false
        local help_key_width=0
        local default_value=""

        if [[ $b64value == "init" ]]; then
            init=true
            help_texts+=( "$( echo "$b64help" | base64 --decode )" )
            default_value=$( echo "$b64default" | base64 --decode )
        else
            value=$( echo "$b64value" | base64 --decode )
        fi

        if [[ "$kind" == "$ARRAY_TYPE" ]]; then
            declare -n this_arr="$key"
            if $init; then
                if [[ -n $default_value ]]; then
                    this_arr=( "$default_value" )
                else
                    this_arr=()
                fi
            else
                this_arr=( "${this_arr[@]}" "${value}" )
            fi
        elif [[ "$kind" == "$BOOL_TYPE" ]]; then
            if $init; then
                if [[ -z $default_value ]]; then
                    default_value=false
                fi
                declare -g "$key"="$default_value"
            else
                declare -g "$key"="$value"
            fi

            if ${!key}; then
                declare -g "no_$key"="false"
            else
                declare -g "no_$key"="true"
            fi
        elif [[ "$kind" == "$STRING_TYPE" ]]; then
            if $init; then
                declare -g "$key"="${default_value}"
            else
                declare -g "$key"="$value"
            fi
        fi
    done <<< "$to_parse"

    $reset_x && set -x || true

    if ${help:-false}; then
        echo
        echo "Help for $( basename $0 )" 
        printf "%s\n" "${help_texts[@]}" | sort
        exit 0
    fi >&2

    return 0
}
export -f parse_args
#!/usr/bin/env bash

# On exit is called on every exit
function _on_exit()
{
    # Cleanup code goes here
    local exit_status="$?"
}

function _on_term()
{
    echo "Terminated!" >&2
    # A termination also tends to call an error, so we block that
    trap '' ERR
}

function _on_error()
{
    local lineno=$1
    shift
    local pipe_fails=( "${@}" )
    echo "ERROR (${pipe_fails[@]}) on line $lineno: Most recent call last:" >&2
    _print_stack >&2
    local x
    for x in ${pipe_fails[@]}; do
        if [[ $x -ne 0 ]]; then
            exit $x
        fi
    done
    exit 1
}


function _print_stack()
{(
    set +x
   local STACK=""
   local i 
   local stack_size="${#FUNCNAME[@]}"
   # to avoid noise we start with 1 to skip the get_stack function
   for (( i=( stack_size - 1 ); i>=2; i-- )); do
      local func="${FUNCNAME[$i]}"
      [ x$func = x ] && func=MAIN
      local linen="${BASH_LINENO[$(( i - 1 ))]}"
      local src="${BASH_SOURCE[$i]}"
      [ x"$src" = x ] && src=non_file_source

      echo "   at: $func $src:$linen"
   done
)}
export -f _print_stack


trap '_on_term' HUP TERM INT
trap '_on_error $LINENO ${PIPESTATUS[@]}' ERR
trap '_on_exit' EXIT

all_args=( "${@}" )
shource_args=()
command_args=()

for x in "${all_args[@]}"; do
    shource_args+=( "$x" )
    shift
    if [[ -f "$x" ]]; then
        break
    fi
done
command_args=( "${@}" )

arguments=(
    child:bool@false/"Whether this is being recursively called" 
    run:bool@false/"Whether to run the script"
    make_exec:bool@false/"Whether to chmod  +x the result"
    print_tag:bool@true/"Whether to print the shource tag in the result"
    print_shebang:bool@true/"Whether to print the shebang"
    create:bool@false/"Whether to create a final file"
    force:bool@false/"Whether to overwrite a file when creating a file"
    indent:string/"How much to indent each line"
    shource_folder:string/"The folder shource is running in"
    write_dir:string/"where we are putting files"
)

parse_args "${arguments[@]}" -- "${shource_args[@]}"

main "${_args[0]}" "${create}" "${force}" "${print_tag}" "${run}" "${print_shebang}" "${make_exec}" "${indent:-}" "${shource_folder:-$self_dir}" "${write_dir:-$( mktemp -d )}" "${child}" "${command_args[@]}";

exit $?
