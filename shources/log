#!/usr/bin/env bash

shource json_print()
shource _short_stack()
function log()
{(
    set +x

    if ${USING_AUTO_LOG:-false}; then
        exec 2>&9
    fi

    local level=0
    if [[ $1 =~ ^-?[0-9]+$ ]]; then
        local level="$1"
        shift
    fi
    local args=( "${@}" )
    if [[ $level -le ${LOG_LEVEL:-0} ]]; then
        local time=$( date "+%Y-%m-%d %H:%M:%S.%3N" )
        local message="${@}"

        if [[ ${JSON_LOG_FORMAT:-false} == "false" ]]; then
            echo "$time [log $level]: $message" > /dev/stderr
        else
            time=$( date -u +"%Y-%m-%dT%H:%M:%S.%3NZ" )
            # We subtract one line number because shource adds a line at the beginning
            json_print time:s "$time" level:d "$level" msg:s "$message" source:s "$( _short_stack )" > /dev/stderr
        fi
    fi
) 
}

function info(){(
    print_color green "${@}"
)}
export -f info

function warn(){(
    print_color yellow "${@}"
)}
export -f warn

function error(){(
    print_color red "${@}"
)}
export -f error

function fatal(){
    print_color 41 "${@}"
    exit 1
}
export -f fatal

function print_color(){(
    local color="$1"
    shift
    local msg=( "${@}" )
    local bg=0
    local color

    color_code=0
    case $color in
        black)
            color_code=90
        ;;
        red)
            color_code=91
        ;;
        green)
            color_code=92
        ;;
        yellow)
            color_code=93
        ;;
        blue)
            color_code=94
        ;;
        magenta)
            color_code=95
        ;;
        cyan)
            color_code=96
        ;;
        white)
            color_code=97
        ;;
        * )
            color_code=$color
        ;;
    esac

    for item in "${msg[@]}"; do
        local colored_item=$( printf '\001\e[%d;5;%dm\002%s' "$bg" "$color_code" "$item" )
        printf "%b\n" '\001\e[0m\002'"${colored_item}"'\001\e[0m\002';
    done >&2
)}
export -f print_color
