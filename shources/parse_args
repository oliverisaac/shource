#!/usr/bin/env bash

# Loops through passed in args and sets variables for each of them
# Call like this: _parse_args help refresh debug -- "${@}"
function parse_args()
{
    local boolean_flags=()
    local input_args=( "${@}" )
    local num_args=${#input_args[@]}
    local this_arg i key value

    log 2 "Called parse_args with these arguments: ${input_args[@]}"

    for (( i=0; i<num_args; i++ )); do
        this_arg="${input_args[$i]}"
        log 4 "$i : $this_arg"
        if [[ $this_arg == "--" ]]; then
            i=$(( i + 1 ))
            break
        fi
        boolean_flags+=( "$( echo "${this_arg}" | tr '_-' '.' | sed 's/^-*//' )" )
    done

    local boolean_regex=$( IFS='|'; echo "${boolean_flags[*]}" )
    boolean_regex="^--(no-)?(${boolean_regex})(=(true|false))?$"

    local populate_args=false
    declare -g -a _args=()
    for (( ; i<num_args; i++ )); do
        this_arg="${input_args[$i]}"
        log 4 "$i : $this_arg"
        if $populate_args; then
            log 4 "Appending $this_arg to _args[]"
            _args+=( "$this_arg" )
            continue
        fi

        if [[ $this_arg == "--" ]]; then
            populate_args=true
            continue
        fi

        key=""
        value=true
        # Boolean flags
        if [[ ${#boolean_flags[@]} -gt 0 ]] && [[ $this_arg =~ $boolean_regex ]]; then
            key="${BASH_REMATCH[2]}"

            if [[ ${BASH_REMATCH[4]} == "false" ]]; then
                if [[ ${BASH_REMATCH[1]} == "no-" ]]; then
                    value=true
                else
                    value=false
                fi
            else
                if [[ ${BASH_REMATCH[1]} == "no-" ]]; then
                    value=false
                else
                    value=true
                fi
            fi
        elif [[ $this_arg =~ ^--([^=]+)=(.*)$ ]]; then
            key="${BASH_REMATCH[1]}"
            value="${BASH_REMATCH[2]}"
        elif [[ $this_arg =~ ^--(.+)$ ]]; then
            key="${BASH_REMATCH[1]}"
            ((i++))
            value="${input_args[$i]}"
        fi
        key="${key//-/_}"
        if [[ $key == "" ]]; then
            log 4 "Appending $this_arg to _args[]"
            _args+=( "$this_arg" )
        else
            log 4 "Setting $key to $value"
            declare -g "$key"="$value"
        fi
    done
}
