#!/usr/bin/env bash

# Loops through passed in args and sets variables for each of them
# Call like this: _parse_args help refresh debug -- "${@}"
shource log()

function parse_these()
{
    local boolean_long_flags=()
    local boolean_short_flags=()
    local string_long_flags=()
    local string_short_flags=()
    local array_long_flags=()
    local array_short_flags=()
    declare -A required_flags
    declare -A flag_maps

    local input_args=( "${@}" )
    local num_args=${#input_args[@]}
    local this_arg i key value arg_type

    log 2 "Called parse_args with these arguments: ${input_args[@]}"

    for (( i=0; i<num_args; i++ )); do
        this_arg="${input_args[$i]}"
        if [[ $this_arg == "--" ]]; then
            i=$(( i + 1 ))
            break
        fi
        local arg_type=$BOOL_TYPE

        flag_regex='^([!])?([a-zA-Z0-9_-]+)(:([a-zA-Z]))?'
        default_help_regex='((\^([a-zA-Z_]+))*)(@(.*))?(/(.*))'
        regex_bool="${flag_regex}:b(ool(ean)?)?$default_help_regex$"
        regex_array="${flag_regex}:a(rr(ay)?)?$default_help_regex$"
        regex_string="${flag_regex}:s(tr(ing)?)?$default_help_regex$"
        if [[ $this_arg =~ ${regex_bool} ]]; then
            arg_type=$BOOL_TYPE
        elif [[ $this_arg =~ ${regex_array} ]]; then
            arg_type=$ARRAY_TYPE
        elif [[ $this_arg =~ ${regex_string} ]]; then
            arg_type=$STRING_TYPE
        else
            log 0 "bool regex: $regex_bool"
            log 0 "array regex: $regex_array"
            log 0 "string regex: $regex_string"
            log 0 "Proper format for argument config: !long_flag:short_flag:type^ENV_VAR@default/help_message"
            log 0 "help_message is required, use ! to indicate required"
            log -1 "Error with pars args, unexpected config: $this_arg"
        fi

        # We want to be able to match both dry_run and dry-run
        required=false
        [[ "!" == "${BASH_REMATCH[1]}" ]] && required=true 
        long_flag="${BASH_REMATCH[2]}"
        long_flag="${long_flag//[_.-]/_}"
        var_name="${long_flag}"

        short_flag="${BASH_REMATCH[4]}"
        env_vars="${BASH_REMATCH[7]}"
        default_value="${BASH_REMATCH[11]}"
        help_text="${BASH_REMATCH[13]}"

        env_vars=( ${env_vars//^/ } )

        if $required && [[ -z $default_value ]]; then
            required_flags[$var_name]=false
        else
            required=false
        fi

        local short_flags
        local long_flags

        case "$arg_type" in
            $BOOL_TYPE)
                declare -n short_flags=boolean_short_flags
                declare -n long_flags=boolean_long_flags
                [[ -z $default_value ]] && default_value="false"
            ;;
            $ARRAY_TYPE)
                declare -n short_flags=array_short_flags
                declare -n long_flags=array_long_flags
            ;;
            $STRING_TYPE)
                declare -n short_flags=string_short_flags
                declare -n long_flags=string_long_flags
            ;;
            * )
                log -1 "Invalid flag  time: $arg_type"
            ;;
        esac

        log 4 "$i : long: $long_flag short: $short_flag type: $arg_type required: $required default: $default_value help: $help_text"

        long_flags=( "${long_flags[@]}" "${long_flag//_/[-_.]}" )
        flag_maps[$long_flag]="$var_name"
        if [[ -n $short_flag ]]; then
            short_flags=( "${short_flags[@]}" "${short_flag//_/[-_.]}" )
            flag_maps[$short_flag]="$var_name"
        fi

        local required_message="Optional"
        $required && required_message="Required"
        local env_var_help=" "
        if [[ ${#env_vars[@]} -gt 0 ]]; then
            env_var_help=" Env: [ ${env_vars[*]} ] "
        fi
        b64help=$( printf "   %-15s : %s (default: %s)%s%s" "--${long_flag//_/-}${short_flag:+, -}${short_flag}" "$help_text" "$default_value" "$env_var_help" "$required_message" )
        b64help=$( echo "$b64help" | base64 -w0 )
        for var in "${env_vars[@]}"; do
            declare -n env_var=$var
            if [[ "${env_var:-}" != "" ]]; then
                default_value="$env_var"
            fi
        done

        b64default=$( echo "$default_value" | base64 -w0 )

        # Initialize each arg
        printf "%s:%s:%s:%s:%s\n" "$arg_type" "${var_name//./_}" "init" "$b64default" "$b64help"
    done

    # Want to match: --debug --no-debug -d --debug=false --debug=true -d=false -d=true -d false -d true --debug false --debug true 
    local boolean_long_regex=$( IFS='|'; echo "${boolean_long_flags[*]}" )
    local boolean_short_regex=$( IFS='|'; echo "${boolean_short_flags[*]}" )
    boolean_regex="^(--(no-)?(${boolean_long_regex})|-(${boolean_short_regex}))(=(true|false))?$"
    log 4 "bool regex: $boolean_regex"

    # Want to match: --name=bob --name bob -n bob -n=bob
    local string_long_regex=$( IFS='|'; echo "${string_long_flags[*]}" )
    local string_short_regex=$( IFS='|'; echo "${string_short_flags[*]}" )
    string_regex="^(--(${string_long_regex})|-(${string_short_regex}))(=(.*))?$"
    log 4 "string regex: $string_regex"

    # Want to match: --name=bob --name bob -n bob -n=bob
    local array_long_regex=$( IFS='|'; echo "${array_long_flags[*]}" )
    local array_short_regex=$( IFS='|'; echo "${array_short_flags[*]}" )
    array_regex="^(--(${array_long_regex})|-(${array_short_regex}))(=(.*))?$"
    log 4 "array regex: $array_regex"

    log 5 "Flag maps:"
    for k in "${!flag_maps[@]}"; do
        log 5 "$k : ${flag_maps[$k]}"
    done

    local populate_args=false
    declare -g -a _args=()
    for (( ; i<num_args; i++ )); do
        this_arg="${input_args[$i]}"
        log 4 "$i : $this_arg"

        if [[ $this_arg == "--" ]]; then
            populate_args=true
            continue
        fi

        key=""
        value=true
        kind=$STRING_TYPE
        
        # Boolean flags
        if $populate_args; then
            key="_args"
            value="$this_arg"
            kind=$ARRAY_TYPE
        elif [[ ${#boolean_long_flags[@]} -gt 0 ]] && [[ $this_arg =~ $boolean_regex ]]; then
            kind=$BOOL_TYPE

            negation_part="${BASH_REMATCH[2]}"
            long_key="${BASH_REMATCH[3]}"
            short_key="${BASH_REMATCH[4]}"
            equals_part="${BASH_REMATCH[5]}"
            equals_value="${BASH_REMATCH[6]}"
            value=true

            search_key="${long_key:-${short_key}}"
            search_key="${search_key//[_.-]/_}"
            key="${flag_maps[$search_key]:-}"
            [[ -z $key ]] && log -1 "Could not find $search_key as a defined argument"

            if [[ $equals_part == "" ]]; then
                # If the next arguemnt is true or false, we'll assume it is referrign to this bool
                peek_value="${input_args[$i+1]:-}"
                if [[ $peek_value == "true" ]] || [[ $peek_value == "false" ]]; then
                    ((i++))
                    value=$peek_value
                fi
            else
                if [[ $equals_value == "true" ]] || [[ $equals_value == "false" ]]; then
                    value=$equals_value
                else
                    log 0 "Error: a bool flag can only be set to true or false (Got: '$equals_value')"
                    return 1
                fi
            fi

            # Test the negation part of this
            if [[ $negation_part == "no-" ]]; then
                # Matches --no-bool false
                if $value; then
                    value=false
                else
                    value=true
                fi
            fi
        elif [[ ${#string_long_flags[@]} -gt 0 ]] && [[ $this_arg =~ $string_regex ]]; then
            kind="$STRING_TYPE"

            long_key="${BASH_REMATCH[2]}"
            short_key="${BASH_REMATCH[3]}"
            equals_part="${BASH_REMATCH[4]}"
            equals_value="${BASH_REMATCH[5]}"
            value=""

            search_key="${long_key:-${short_key}}"
            search_key="${search_key//[_.-]/_}"
            key="${flag_maps[$search_key]:-}"
            [[ -z $key ]] && log -1 "Could not find $search_key as a defined argument"

            if [[ $equals_value == "" ]]; then
                if [[ $(( i + 1 )) -gt ${#input_args[@]} ]]; then
                    log -1 "You must provide a value for --$key"
                fi
                ((i++))
                value="${input_args[$i]}"
            else
                value="$equals_value"
            fi
        elif [[ ${#array_long_flags[@]} -gt 0 ]] && [[ $this_arg =~ $array_regex ]]; then
            kind="$ARRAY_TYPE"

            long_key="${BASH_REMATCH[2]}"
            short_key="${BASH_REMATCH[3]}"
            equals_part="${BASH_REMATCH[4]}"
            equals_value="${BASH_REMATCH[5]}"
            value=""

            search_key="${long_key:-${short_key}}"
            search_key="${search_key//[_.-]/_}"
            key="${flag_maps[$search_key]:-}"
            [[ -z $key ]] && log -1 "Could not find $search_key as a defined argument"

            if [[ $equals_value == "" ]]; then
                if [[ $(( i + 1 )) -gt ${#input_args[@]} ]]; then
                    log -1 "You must provide a value for --$key"
                fi
                ((i++))
                value="${input_args[$i]}"
            else
                value="$equals_value"
            fi
        else
            key="_args"
            value="$this_arg"
            kind=$ARRAY_TYPE
        fi

        key="${key//-/_}"
        if [[ $key == "" ]]; then
            key="_args"
            value="$this_arg"
            kind=$ARRAY_TYPE
        fi

        required_flags[$key]=true
        printf "%s:%s:%s:\n" "$kind" "$key" "$( base64 -w0 <<< "$value" )"
    done

    local missing_flags=()
    for f in "${!required_flags[@]}"; do
        if ! "${required_flags[$f]}"; then
            missing_flags+=( "$f" )
        fi
    done
    if [[ ${#missing_flags[@]} -gt 0 ]]; then
        printf "%s:%s:%s:\n" "$ERROR_TYPE" "error" "$( base64 -w0 <<< "Missing these required flags: ${missing_flags[@]}"  )"
    fi
}
export -f parse_these

function parse_args()
{
    local reset_x=false
    local ARRAY_TYPE=array BOOL_TYPE=boolean STRING_TYPE=string ERROR_TYPE=error
    local help_texts=()
    local error=false

    if [[ $- =~ x ]]; then
        reset_x=true
    fi
    set +x
    local to_parse
    to_parse=$( parse_these help:h:bool/"Display this help" "${@}" ) 

    local key b64value
    while IFS=':' read kind key b64value b64default b64help; do
        local value
        local init=false
        local help_key_width=0
        local default_value=""

        if [[ $b64value == "init" ]]; then
            init=true
            help_texts+=( "$( echo "$b64help" | base64 --decode )" )
            default_value=$( echo "$b64default" | base64 --decode )
        else
            value=$( echo "$b64value" | base64 --decode )
        fi

        if [[ "$kind" == "$ARRAY_TYPE" ]]; then
            declare -n this_arr="$key"
            if $init; then
                if [[ -n $default_value ]]; then
                    this_arr=( "$default_value" )
                else
                    this_arr=()
                fi
            else
                this_arr=( "${this_arr[@]}" "${value}" )
            fi
        elif [[ "$kind" == "$BOOL_TYPE" ]]; then
            if $init; then
                if [[ -z $default_value ]]; then
                    default_value=false
                fi
                declare -g "$key"="$default_value"
            else
                declare -g "$key"="$value"
            fi

            if ${!key}; then
                declare -g "no_$key"="false"
            else
                declare -g "no_$key"="true"
            fi
        elif [[ "$kind" == "$STRING_TYPE" ]]; then
            if $init; then
                declare -g "$key"="${default_value}"
            else
                declare -g "$key"="$value"
            fi
        elif [[ "$kind" == "$ERROR_TYPE" ]]; then
            log -1 "$value"; 
            error=true
        fi
    done <<< "$to_parse"

    $reset_x && set -x || true

    if ${help:-false} || $error; then
        echo
        echo "Help for $( basename $0 )" 
        printf "%s\n" "${help_texts[@]}" | sort
        echo
        $error && exit 1 || exit 0
    fi >&2

    return 0
}
export -f parse_args
